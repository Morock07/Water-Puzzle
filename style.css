/* Realistic Water Background */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    /* Base water gradient */
    background: linear-gradient(
        to bottom,
        #054880 0%,     /* Deep water */
        #0d6cb3 30%,    /* Mid-depth */
        #2e8ad1 60%,    /* Shallow water */
        #69b0f1 100%    /* Surface water */
    );
    position: relative;
    min-height: 100vh;
    margin: 0;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    color: white;
    overflow: hidden;
}

/* Create a water surface effect */
.water-surface {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    overflow: hidden;
    z-index: 0;
}

/* Wave effect */
.wave {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 200%;
    height: 100%;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 120' preserveAspectRatio='none'%3E%3Cpath d='M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z' opacity='.15' fill='%23FFFFFF'/%3E%3C/svg%3E");
    background-size: 1200px 100%;
    animation: wave 12s linear infinite;
    z-index: 1;
    opacity: 0.7;
}

.wave:nth-child(2) {
    bottom: 0;
    animation: wave 8s linear reverse infinite;
    opacity: 0.5;
}

.wave:nth-child(3) {
    bottom: 0;
    animation: wave 20s linear infinite;
    opacity: 0.3;
}

/* Light reflection on water surface */
.light-reflection {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: 
        radial-gradient(ellipse at 30% 40%, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0) 70%),
        radial-gradient(ellipse at 70% 60%, rgba(255, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0) 70%);
    opacity: 0.5;
    animation: shimmer 8s ease-in-out infinite alternate;
    z-index: 2;
    pointer-events: none;
}

/* Water ripple effect */
.ripple {
    position: absolute;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 70%);
    transform: scale(0);
    animation: rippleEffect 2s ease-out forwards;
    pointer-events: none;
    z-index: 3;
}

/* Floating bubbles */
.bubble {
    position: absolute;
    border-radius: 50%;
    background: radial-gradient(circle at 30% 30%, rgba(255,255,255,0.6) 0%, rgba(255,255,255,0.1) 70%);
    box-shadow: 0 0 5px rgba(255,255,255,0.3);
    transform: translateY(0);
    z-index: 2;
    animation: bubbleFloat 8s ease-in-out infinite;
    opacity: 0.7;
}

/* Wave animation */
@keyframes wave {
    0% { transform: translateX(0); }
    100% { transform: translateX(-50%); }
}

/* Shimmer animation for light reflections */
@keyframes shimmer {
    0% { opacity: 0.3; }
    50% { opacity: 0.6; }
    100% { opacity: 0.4; }
}

/* Ripple animation */
@keyframes rippleEffect {
    to {
        transform: scale(5);
        opacity: 0;
    }
}

/* Bubble float animation */
@keyframes bubbleFloat {
    0% {
        transform: translateY(0);
        opacity: 0.7;
    }
    100% {
        transform: translateY(-100vh);
        opacity: 0;
    }
}

/* Ensure game elements stay on top of water effect */
.tube, h1, .level-info, .moves-counter, button, .level-complete {
    position: relative;
    z-index: 5;
}

/* Add this JavaScript to your code */
/*
document.addEventListener('DOMContentLoaded', function() {
    // Create water surface container
    const waterSurface = document.createElement('div');
    waterSurface.className = 'water-surface';
    document.body.appendChild(waterSurface);
    
    // Create waves
    for (let i = 0; i < 3; i++) {
        const wave = document.createElement('div');
        wave.className = 'wave';
        waterSurface.appendChild(wave);
    }
    
    // Create light reflection
    const lightReflection = document.createElement('div');
    lightReflection.className = 'light-reflection';
    waterSurface.appendChild(lightReflection);
    
    // Create bubbles
    createBubbles(20);
    
    // Add click event for ripple effect
    document.body.addEventListener('click', function(e) {
        createRipple(e.clientX, e.clientY);
    });
    
    // Function to create ripple effect
    function createRipple(x, y) {
        const ripple = document.createElement('div');
        ripple.className = 'ripple';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        ripple.style.width = '20px';
        ripple.style.height = '20px';
        document.body.appendChild(ripple);
        
        // Remove ripple after animation completes
        setTimeout(() => {
            ripple.remove();
        }, 2000);
    }
    
    // Function to create bubbles
    function createBubbles(count) {
        for (let i = 0; i < count; i++) {
            setTimeout(() => {
                const bubble = document.createElement('div');
                bubble.className = 'bubble';
                
                // Random position, size and animation duration
                const size = 2 + Math.random() * 8;
                const left = Math.random() * 100;
                const duration = 5 + Math.random() * 10;
                
                bubble.style.width = size + 'px';
                bubble.style.height = size + 'px';
                bubble.style.left = left + '%';
                bubble.style.bottom = '-10px';
                bubble.style.animationDuration = duration + 's';
                
                waterSurface.appendChild(bubble);
                
                // Remove bubble after animation completes
                setTimeout(() => {
                    bubble.remove();
                }, duration * 1000);
            }, i * 300);
        }
        
        // Continue creating bubbles
        setTimeout(() => {
            createBubbles(count);
        }, count * 300);
    }
});
*/